https://github.com/manjime83/datapower-tools/blob/77dd05dc325bc978daa455dcf2db059e7c5181b2/jose-firewall/local/js/jose-verify-with-config.js
https://github.com/huqi1996/demo-collection/blob/f875b0640038f52df678cb84f546d4a377a9b16f/src/main/java/com/huqi/qs/crypto/MainCrypto.java
--------------
var body = ' { "name": "test", "description": "test json", "website": "domain.com" } ';
JSON.stringify(JSON.parse(body))
-----
var urlopen  = require('urlopen');
var sm = require ('service-metadata.js');
var hm = require ('header-metadata.js');

var uri = sm.getVar ('var://service/URI');	
console.warn("URI: " + uri);	
--------

<dp:set-variable name="'var://context/sp/accessToken'"

value='string($acctkn)'/>
---
<xsl:variable name="acctkn">
<xsl:value-of select="//output/access_token/text()"/>
</xsl:variable>
---------
UUID

Since you cannot use dp:generate-uuid in GatewayScript, you have to call it in GatewayScript using the XSLT transform function: https://www.ibm.com/docs/en/datapower-gateways/10.0.1?topic=apis-transform-module



uuid.js:

var transform = require('transform');



var options = {

    "location": "local:///generate-uuid.xsl"

};

transform.xslt(options, function(error, nodelist, abortinfo) {

    if (error) {

        session.output.write("An error was returned when executing '" + options.location + "'");

    }

    else {

        //write out the transformed result

        session.output.write(nodelist);

    }

});





generate-uuid.xsl:

<xsl:stylesheet version="1.0"

  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"

  xmlns:dp="http://www.datapower.com/extensions"

  extension-element-prefixes="dp">

  <xsl:output omit-xml-declaration="yes" />



  <xsl:template match="/">

    <xsl:copy-of select="dp:generate-uuid()" />

  </xsl:template>



</xsl:stylesheet>


result service output:



curl http://dpl2idg2.rtp.raleigh.ibm.com:9191/

050f68b7-4bae-4b20-9928-b6634d1db595



curl http://dpl2idg2.rtp.raleigh.ibm.com:9191/

8a289630-2195-4c97-8d6e-b6634d1ddd56



curl http://dpl2idg2.rtp.raleigh.ibm.com:9191/

8bc45b4b-37d5-4ac1-bf8f-b6634d1dd666


------------
var hm = require('header-metadata'); 

var allHeaders = hm.current.get();
console.log(JSON.stringify(allHeaders));

var contentType = hm.current.get('Content-Type');
console.log("Content-Type header %s", contentType);

----------
<xsl:text disable-output-escaping="yes"><![CDATA[CREATE TABLE IF NOT EXISTS `]]></xsl:text>



<ToUserName><![CDATA[toUserId]]></ToUserName>
-----------

var urlopen = require ('urlopen');
var sm = require ('service-metadata');
var dpuri = sm.getVar ('var://service/URI');
var endpoint = 'https://gw-apic.qiwa.info/tal/staging/ta-oauth/oauth2/token';

var options = {
            target: endpoint,
            method: 'POST',
           headers:{'Content-Type' : 'application/x-www-form-urlencoded' },
           contentType: 'application/x-www-form-urlencoded',		   
         data : "client_id=ab8eb9a74291d8b627d99c9c328f0821&client_secret=965bf427d5b14de1aae4efdf87851547&grant_type=client_credentials&scope=IntegrationScope"
};
urlopen.open(options, function(error, response) {
  if (error) {
    // an error occurred during the request sending or response header parsing
    session.output.write("urlopen error: "+JSON.stringify(error));
  } else {
    // get the response status code
    var responseStatusCode = response.statusCode;
    var responseReasonPhrase = response.reasonPhrase;
    console.log("Response status code: " + responseStatusCode);
    console.log("Response reason phrase: " + responseReasonPhrase);
    // reading response data
    response.readAsJSON(function(error, responseData){
      if (error){
        throw error ;
      } else {
        var token = "Bearer"+" "+responseData.access_token;
var options1 = {
            target: 'https://gw-apic.qiwa.info'+dpuri,
            method: 'POST',
           headers:{'Authorization' : token },
           contentType: 'application/json',	   
         data : json
};
urlopen.open(options1, function(error, response) {
  if (error) {
    
    session.output.write("urlopen error: "+JSON.stringify(error));
  } else {
   
    response.readAsBuffer(function(error, responseData){
      if (error){
        throw error ;
      } else {
        session.output.write(responseData) ;
      }
    });
  }
});

      }
    });
  }
});


----------
if(context.get('request.headers.authorization')){
var vAuth = (context.get('request.headers.authorization').split(' ').pop());
------

get token
var urlopen = require ('urlopen');
var Token =session.name('sp').getVar('accessToken');
var accessToken="";
var sm = require ('service-metadata');
session.output.write({"test":"test"});
session.input.readAsJSON( function ( error, json) {
console.error('count INPUT: %j', JSON.stringify(json));
accessToken = "Bearer ";
accessToken = accessToken.concat(Token);
var options = {
target: 'https://api.ciscospark.com/v1/people/me',
sslClientProfile: 'ciscospark',
method: 'get',
headers: {"Authorization":accessToken}
};
urlopen.open (options, function (error, response) {
if (error) {
session.output.write ("urlopen connect error: " +
JSON.stringify(error));
} else {
var responseStatusCode = response.statusCode;
if (responseStatusCode == 200) {
response.readAsJSON(function(error, responseData)
{
if (error) {
session.output.write("readAsBuffer error:
" + JSON.stringify(error));
} else {
//console.error('count: %j',JSON.stringify(responseData));
session.output.write(JSON.stringify(responseData));
}
});
} else {
session.output.write ("urlopen target return
statusCode " + responseStatusCode);

}
}
});
});


----------------------

var inCtx = 'param1';
var inCtx2 = 'payload';
/**
 * 
 * END: Modify Parameters
 * 
 **/

// Read the input as a JSON object
session.input.readAsJSON(function (error, json) {
  if (error) {
    throw error;
  }

  console.notice('json', JSON.stringify(json));

  var ctx = session.name('policyCtx') || session.createContext('policyCtx');
  ctx.setVar(inCtx, json[inCtx]);

  //modify (JSON.stringify | JSON.stringify) to reflect in the input payload
  session.output.write(XML.parse(json[inCtx2]));
});
+++++++++=

var urlopen = require('urlopen');
var options = {
    target: 'dpkafka://kafka-cluster?RequestTopic=test&ConsumerGroup=datapower&Key=4234234',
    data: {"name":"adam"},
    timeout: 10
};

urlopen.open(options, function (error, response) {
    if (error) {
        session.output.write ("urlopen connect error: " + JSON.stringify(error));
    } else {

            response.readAsBuffer(function(error, data) {
                if (error) {
                    session.output.write("readAsBuffer error: " + JSON.stringify(error));
                } else {
                    session.output.write(data);
                } 
            });
  
    }
});

-----------
console.alert("Starting Read/Write Payload Alex Catch The Session");

//session.input.readAsBuffer(function (error, buffer) {
session.input.readAsBuffer(function (error, buffer) {

  if (error) {
    // handle error
    session.output.write(error.errorMessage);
    console.error("readAsBuffer() failure: %s", error); //New
  } else {
    /* write the default output buffer */
    session.output.write(buffer);
    console.alert("readAsBuffer() success: %s", buffer); //New

    //Find the json
    var specifyJson = JSON.stringify(buffer);
    console.alert("@@@ //Find the json" + specifyJson);

    // var json = JSON.parse();
    // console.alert("@@@ //Find the jsonParce " + json);

    var responceJson = buffer.id;
    console.alert("@@@ //Find the jsonType " + responceJson);

    //session.output.write(specifyJson);

    //Get variable
    //var myInputVar = session.input.getVariable('myInputVar');
    //console.alert("@@@ ////Get variable" + myInputVar)
  }
});







-----------

var transform = require('transform');

session.input.readAsXML(function (error, nodelist) {
    var dom = nodelist.item(0).parentNode;
	console.info('dom %s', XML.stringify(dom));
	// use xpath to find the username entry
	//todo: xpath assumes a single entry but there could be multiple items
	transform.xpath('/identity/entry/token/text()', dom, function (error, username) {
		if (error) {
			console.error('error while executing /identity/entry/* xpath - ' + error);
			throw error;
		} else {
			var usernameNode = XML.stringify(username);
			//remove the XML prolog 
			var usernameString = usernameNode.substring(usernameNode.indexOf('>') + 2);
			console.info('username %s', usernameString);
			var xmlString =
				'<credentials>' +
					'<entry type="custom" url="local:///custom_au.xsl">' +
						usernameString +
					'</entry>' + 
				'</credentials>'
			console.info('xml %s', xmlString);
			session.output.write(XML.parse(xmlString));
		}
	})
});

++++++=
--------------


if(context.get('request.headers.authorization')){
                    var vAuth = (context.get('request.headers.authorization').split(' ').pop());
 title: gatewayscript
                    version: 1.0.0
                    source: "var reqauth = apim.getvariable('request.authorization').split(' ');\n


var splitval = new Buffer((reqauth[1] || ''), 'base64').toString('utf8').split(':');\n


var username = splitval[0] || '';\n




var password = splitval[1] || '';\napim.console.debug('user credential : [' + username + ':' + password + ']');\nif (username === 

apim.getvariable('request.parameters.username') && password === apim.getvariable('request.parameters.password')) {\n

\tsession.output.write({ \"authenticatedUser\": username });\n\tapim.setvariable('message.headers.api-authenticated-credential', 'cn=' 

+ username + ',email=' + username + '@poon.com');\n\tapim.setvariable('message.status.code', 200);\n\tapim.output

('application/json');\n}\nelse {\n\tapim.setvariable('message.status.code', 401);\n}"
            - operations:
                - verb: get
                  path: /ping
              execute:



/*Base64 decode the token*/
                    var vDecodedAuthFULL = new Buffer(vAuth,'base64').toString('ascii');
                    console.debug('****Decoded.Auth.Header: ' + vDecodedAuthFULL);
                    /*Modify decoded token to fit json format*/
                    var vDecodedAuthSPLIT = JSON.parse(vDecodedAuthFULL.split('}.{'));

-----

const jose = require('jose');
const fs = require('fs');
const sm = require('service-metadata');
const hm = require('header-metadata');

fs.readAsJSON(`local:///json/service-certs/${sm.processorName}.json`, readFileCallback);

function readFileCallback(error, data) {
    if (error) {
        session.reject(error.errorMessage);
        return;
    }

    session.input.readAsBuffer(readInputCallback.bind(this, data));
}

function readInputCallback(data, error, plaintext) {
    if (error) {
        session.reject(error.errorMessage);
        return;
    }

    const jwsObj = jose.parse(plaintext);

    let certKey;
    if (data.config['http-header']) {
        certKey = hm.current.get(data.config['http-header']);
    } else if (data.config['jws-header']) {
        certKey = jwsObj.getProtected(data.config['http-header']);
    } else if (data.config['context-variable']) {
        const contextParts = data.config['context-variable'].substring(6).split('/').slice(1);
        const name = contextParts.shift();
        const variable = contextParts.join('/');
